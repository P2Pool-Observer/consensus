package merge_mining

import (
	"bytes"
	"testing"
	"time"
)

// testJobDonation Taken from live nano p2pool
var testJobDonation = []byte{
	// 32 bytes           | Secondary public key
	0x7c, 0x0e, 0xd6, 0x5b, 0x9c, 0xd0, 0xd1, 0x77,
	0xb8, 0x8d, 0xfa, 0x6f, 0xe9, 0xd6, 0xe6, 0x4d,
	0xd6, 0xe6, 0x1e, 0x64, 0x15, 0x8f, 0xe9, 0xbd,
	0xb5, 0xb5, 0xdc, 0xee, 0x41, 0x04, 0xcb, 0x3d,

	// 8 bytes            | Secondary public key's expiration timestamp
	0x00, 0x99, 0x58, 0x68, 0x00, 0x00, 0x00, 0x00,

	// 64 bytes           | Master key signature signing the above 40 bytes
	0x7a, 0xf6, 0xc8, 0x44, 0xce, 0x02, 0xfb, 0x3a,
	0x57, 0xc3, 0x8f, 0xf6, 0x64, 0x31, 0xa3, 0x94,
	0xe1, 0x0d, 0x8a, 0xca, 0x03, 0x25, 0x01, 0xd1,
	0xd0, 0xf7, 0xbf, 0xe3, 0xeb, 0x0b, 0x41, 0x6e,
	0xd4, 0x68, 0xc7, 0x56, 0x89, 0x42, 0x58, 0x22,
	0x4d, 0x14, 0x74, 0xb4, 0x8e, 0x0f, 0x5d, 0x96,
	0xbe, 0xb4, 0x6a, 0x5e, 0x60, 0x8f, 0x84, 0x54,
	0x97, 0x57, 0x64, 0x53, 0x78, 0x81, 0x40, 0x0a,

	// 8 bytes  | timestamp
	0xc9, 0x0d, 0x57, 0x68, 0x00, 0x00, 0x00, 0x00,

	// 32 bytes | aux_id
	0x01, 0xf0, 0xcf, 0x66, 0x5b, 0xd4, 0xcd, 0x31,
	0xcb, 0xb2, 0xb2, 0x47, 0x02, 0x36, 0x38, 0x9c,
	0x48, 0x35, 0x22, 0xb3, 0x50, 0x33, 0x5e, 0x10,
	0xa4, 0xa5, 0xdc, 0xa3, 0x4c, 0xb8, 0x59, 0x90,

	// 32 bytes | aux_hash
	0xeb, 0xc0, 0xce, 0x6f, 0x7c, 0x8c, 0xad, 0x3e,
	0x3d, 0x44, 0xb6, 0x3a, 0xd8, 0x23, 0xd1, 0x79,
	0x70, 0xb9, 0xfc, 0xea, 0xb0, 0xbd, 0x85, 0xaf,
	0xf5, 0xea, 0xc4, 0xf1, 0xb6, 0x6c, 0xa6, 0x8c,

	// 16 bytes | aux_diff
	0xcf, 0x65, 0xff, 0x0c, 0x35, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// 64 bytes           | Secondary key signature signing the data
	0x86, 0x3c, 0x90, 0xbf, 0x95, 0xdd, 0x3d, 0x6d,
	0x28, 0x19, 0xaa, 0x0a, 0x97, 0x3e, 0xdb, 0x7f,
	0xcf, 0x1f, 0x60, 0x85, 0x2f, 0xac, 0x46, 0x43,
	0x90, 0x81, 0x72, 0x54, 0x36, 0x0e, 0x03, 0x32,
	0x92, 0x44, 0xd5, 0x75, 0x1d, 0xa3, 0x6a, 0xa1,
	0x7d, 0x0f, 0x3d, 0x97, 0xa2, 0x82, 0xd9, 0x44,
	0xe3, 0x2e, 0x2f, 0x17, 0xab, 0x5a, 0x06, 0xcd,
	0x21, 0x34, 0x41, 0xc9, 0x27, 0xef, 0x2f, 0x05,
}

func TestAuxiliaryJobDonation(t *testing.T) {
	t.Parallel()

	var job AuxiliaryJobDonation

	err := job.FromReader(bytes.NewReader(testJobDonation))
	if err != nil {
		t.Fatal(err)
	}

	buf, err := job.MarshalBinary()
	if err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(buf, testJobDonation) {
		t.Fatal("buffers not equal")
	}

	if _, err := job.Verify(time.Unix(1750530000, 0)); err != nil {
		t.Fatal(err)
	}
}
