{% import "git.gammaspectra.live/P2Pool/p2pool-observer/types" %}
{% import "git.gammaspectra.live/P2Pool/p2pool-observer/monero/crypto" %}
{% import "git.gammaspectra.live/P2Pool/p2pool-observer/utils" %}
{% import "git.gammaspectra.live/P2Pool/p2pool-observer/p2pool/sidechain" %}
{% import "git.gammaspectra.live/P2Pool/p2pool-observer/cmd/index" %}
{% import p2pooltypes "git.gammaspectra.live/P2Pool/p2pool-observer/p2pool/types" %}

{% import "encoding/binary" %}
{% import "fmt" %}
{% import "sync" %}
{% import "slices" %}
{% import hex2 "encoding/hex" %}

{% stripspace %}

{% code
var hexBufPool sync.Pool

func init() {
	hexBufPool.New = func() any {
		return make([]byte, types.HashSize*2)
	}
}
%}



{% func hex(val any) %}
    {% switch s := val.(type) %}
    {% case string %}
		{%s s %}
    {% case types.Difficulty %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:types.DifficultySize*2], s.Bytes())
	    %}
	    {%z= hexBuf[:types.DifficultySize*2] %}
    {% case crypto.PrivateKeyBytes %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s[:])
	    %}
	    {%z= hexBuf[:] %}
    {% case crypto.PublicKeyBytes %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s[:])
	    %}
	    {%z= hexBuf[:] %}
    {% case crypto.PrivateKey %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s.AsSlice())
	    %}
	    {%z= hexBuf[:] %}
    {% case crypto.PublicKey %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s.AsSlice())
	    %}
	    {%z= hexBuf[:] %}
    {% case types.Hash %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s[:])
	    %}
	    {%z= hexBuf[:] %}
    {% case []byte %}
		{%s= hex2.EncodeToString(s) %}
    {% case uint32 %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
		var buf [4]byte
		binary.LittleEndian.PutUint32(buf[:], s)
	    hex2.Encode(hexBuf[:4*2], buf[:])
	    %}
	    {%z= hexBuf[:4*2] %}
    {% case uint64 %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
		var buf [8]byte
		binary.LittleEndian.PutUint64(buf[:], s)
	    hex2.Encode(hexBuf[:8*2], buf[:])
	    %}
	    {%z= hexBuf[:8*2] %}
    {% default %}
		{%v val %}
    {% endswitch %}
{% endfunc %}

{% func shorten(val any, n int) %}
    {% switch s := val.(type) %}
    {% case string %}
		{%s utils.Shorten(s, n) %}
    {% case []byte %}
		{%z= utils.ShortenSlice(slices.Clone(s), n) %}
    {% case crypto.PrivateKeyBytes %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s[:])
	    %}
	    {%z= utils.ShortenSlice(hexBuf[:], n) %}
    {% case crypto.PublicKeyBytes %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s[:])
	    %}
	    {%z= utils.ShortenSlice(hexBuf[:], n) %}
    {% case crypto.PrivateKey %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s.AsSlice())
	    %}
	    {%z= utils.ShortenSlice(hexBuf[:], n) %}
    {% case crypto.PublicKey %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s.AsSlice())
	    %}
	    {%z= utils.ShortenSlice(hexBuf[:], n) %}
    {% case types.Hash %}
        {% code
            hexBuf := hexBufPool.Get().([]byte)
            defer hexBufPool.Put(hexBuf)
        %}
	    {% code
	    hex2.Encode(hexBuf[:], s[:])
	    %}
	    {%z= utils.ShortenSlice(hexBuf[:], n) %}
    {% case fmt.Stringer %}
		{%s utils.Shorten(s.String(), n) %}
    {% default %}
		{%s utils.Shorten(fmt.Sprintf("%v", val), n) %}
    {% endswitch %}
{% endfunc %}



{% func henc(val any) %}
    {% code
        var buf [types.HashSize*2+1]byte
    %}
    {% switch s := val.(type) %}
    {% case types.Hash %}
        {% code
        dst := utils.EncodeSliceBinaryNumber(buf[:], s[:])
        %}
        {%z= dst[:] %}
    {% case crypto.PrivateKeyBytes %}
        {% code
        dst := utils.EncodeSliceBinaryNumber(buf[:], s[:])
        %}
        {%z= dst[:] %}
    {% case string %}
        {%s= utils.EncodeHexBinaryNumber(s) %}
    {% case fmt.Stringer %}
		{%s= utils.EncodeHexBinaryNumber(s.String()) %}
    {% default %}
		panic("type not allowed")
    {% endswitch %}
{% endfunc %}

{% func software_info(softwareId p2pooltypes.SoftwareId, softwareVersion p2pooltypes.SoftwareVersion) %}
	{% if softwareId == 0 && softwareVersion == 0 %}
		Not present
	{% else %}
	    {%s= softwareId.String() %}{%s= ` ` %}{%s= softwareVersion.String() %}
	{% endif %}
{% endfunc %}

{% func side_block_valuation(b any, consensus *sidechain.Consensus) %}
    {% switch block := b.(type) %}
    {% case *index.SideBlock %}
		{% if block.IsOrphan() %}
			0%
		{% elseif block.IsUncle() %}
		    {%dul 100-consensus.UnclePenalty %}% (uncle)
		{% elseif len(block.Uncles) > 0 %}
		    100% + {%dul consensus.UnclePenalty %}% of {%d len(block.Uncles) %} uncle(s)
		{% else %}
			100%
		{% endif %}
    {% case *sidechain.PoolBlock %}
		{% if len(block.Side.Uncles) > 0 %}
		    100% + {%dul consensus.UnclePenalty %}% of {%d len(block.Side.Uncles) %} uncle(s)
		{% else %}
			100%
		{% endif %}
    {% default %}
		panic("type not allowed")
    {% endswitch %}
{% endfunc %}

{% endstripspace %}